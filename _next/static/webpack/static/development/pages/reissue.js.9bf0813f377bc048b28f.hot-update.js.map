{"version":3,"file":"static/webpack/static/development/pages/reissue.js.9bf0813f377bc048b28f.hot-update.js","sources":["webpack:///./utils/main.ts"],"sourcesContent":["import { mainInstance, nckuInstance } from './config';\nimport runtimeEnv from '../runtimeEnv';\nimport { IStudent, IResp } from '../constant';\n\n/**\n * @global\n *  @host MAIN_HOST\n *  @method GET\n * Get from MAIN_HOST/query\n * @function queryApi()\n * @param {string} studentID\n * @param {boolean} isEng\n * @returns {Promise<IResp>}\n */\nconst queryApi = async (studentID: string, isEng: boolean): Promise<IResp> => {\n  const data = await mainInstance\n    .get('/students/query/', {\n      params: {\n        ID: studentID,\n        type: isEng ? 'English' : 'Chinese',\n      },\n    })\n    .then(resp => resp.data)\n    .catch(() => null);\n  return data;\n};\n\n/**\n * @global\n *  @host MAIN_HOST\n *  @method GET\n * Get from MAIN_HOST/students/gradinfo/\n * @function gradinfoApi()\n * @param {string} studentID\n * @returns {Promise<IStudent>}\n */\nconst gradinfoApi = async (studentID: string): Promise<IStudent> => {\n  const data = await mainInstance\n    .get<IStudent>('/students/gradinfo/', {\n      params: { ID: studentID },\n    })\n    .then(resp => resp.data)\n    .catch(() => null);\n  return data.student_id ? data : null;\n};\n\n/**\n * @global\n *  @host MAIN_HOST\n *  @method GET\n * Get from MAIN_HOST/students/issue/\n * @function issueApi()\n * @param {string} studentID\n * @param {boolean} isEng\n * @returns {Promise<IResp>}\n */\nconst issueApi = async (studentID: string, isEng: boolean): Promise<IResp> => {\n  const data = await mainInstance\n    .get<IResp>('/students/issue/', {\n      params: {\n        ID: studentID,\n        type: isEng ? 'English' : 'Chinese',\n      },\n    })\n    .then(resp => resp.data)\n    .catch(() => null);\n  return data;\n};\n\n/**\n * @global\n *  @host MAIN_HOST\n *  @method GET\n * Get from MAIN_HOST/students/reissue/\n * @function reissueApi()\n * @param {string} studentID\n * @param {boolean} isEng\n * @returns {Promise<IResp>}\n */\nconst reissueApi = async (\n  studentID: string,\n  isEng: boolean,\n): Promise<IResp> => {\n  const data = await mainInstance\n    .get<IResp>('/students/reissue/', {\n      params: {\n        ID: studentID,\n        type: isEng ? 'English' : 'Chinese',\n      },\n    })\n    .then(resp => resp.data)\n    .catch(() => null);\n  return data;\n};\n\n/**\n * @global\n *  @host MAIN_HOST\n *  @method POST\n * Get from MAIN_HOST/students/reissue/\n * @function renameApi()\n * @param {string} studentID\n * @param {string} name\n * @returns {Promise<IResp>}\n */\nconst renameApi = async (\n  studentID: string,\n  newName: string,\n): Promise<IResp> => {\n  const data = await mainInstance\n    .get('/students/rename/', {\n      param: {\n        ID: studentID,\n        name: newName,\n      },\n    })\n    .then(resp => resp.data)\n    .catch(() => null);\n  return data;\n};\n\n/**\n * @global\n *  @host MAIN_HOST\n *  @method GET\n * Translate cardId into studentId from NCKU_HOST/ncku/queryno.php.\n * If it is not necessary, this function can be deleted\n * @function cardToStudentID()\n * @param {string} studentID\n */\nconst cardToStudentID = async (cardID: string) => {\n  const re = /[A-Z]{1}[0-9]{8}/i;\n  let studentID: string = cardID;\n\n  if (!cardID.match(re)) {\n    studentID = await nckuInstance\n      .get('/ncku/queryno.php', {\n        params: { octin: cardID },\n      })\n      .then(resp => resp.data)\n      .catch();\n  }\n\n  return studentID;\n};\n\n/**\n * @function getRelativePath()\n * @param {string} path\n * resolve path for assets and links\n */\nfunction getRelativePath(path: string): string {\n  if (runtimeEnv.GITHUB) {\n    const valid = /[^\\/].*/g.exec(path);\n    return valid\n      ? `/${runtimeEnv.PROJ_NAME}/${valid[0]}`\n      : `/${runtimeEnv.PROJ_NAME}/`;\n  }\n  return path;\n}\n\nexport {\n  queryApi,\n  issueApi,\n  reissueApi,\n  gradinfoApi,\n  renameApi,\n  cardToStudentID,\n  getRelativePath,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAVA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAaA;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AAPA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAUA;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAVA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAaA;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAbA;AAIA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;;;;;;;;;;;;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAFA;AADA;AAMA;AAAA;AACA;AAAA;AACA;AAbA;AAIA;AAJA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;;;;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAOA;AAAA;AAAA;AADA;AAGA;AAAA;AACA;AAVA;AAKA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;;;;;;;AAKA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}